import sendFile from './src/whatsapp/sendFile.js';
import fs from 'fs';

// Mock b√°sico do logger
global.logger = {
  info: (component, message, ...args) => console.log(`[INFO] ${component}: ${message}`, ...args),
  debug: (component, message, ...args) => console.log(`[DEBUG] ${component}: ${message}`, ...args),
  error: (component, message, ...args) => console.log(`[ERROR] ${component}: ${message}`, ...args),
  warn: (component, message, ...args) => console.log(`[WARN] ${component}: ${message}`, ...args)
};

// Mock das vari√°veis de ambiente
process.env.WHATSAPP_URL = 'http://localhost:3000';
process.env.WHATSAPP_SECRET = 'test-secret';

// Mock do fetch
global.fetch = async (url, options) => {
  console.log(`üåê Mock fetch chamado:`);
  console.log(`   URL: ${url}`);
  console.log(`   Method: ${options.method}`);
  console.log(`   Headers:`, options.headers);
  
  // Simular sucesso
  return {
    ok: true,
    status: 200,
    json: async () => ({ success: true, message: 'File sent successfully' })
  };
};

async function testSendFile() {
  console.log('üß™ Testando fun√ß√£o sendFile\n');

  // Criar arquivo de teste tempor√°rio (.ics)
  const testFilePath = '/tmp/test-evento.ics';
  const testIcsContent = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Assistente Virtual//NONSGML Event//EN
BEGIN:VEVENT
UID:test-event-${Date.now()}
DTSTART:20250806T150000Z
DTEND:20250806T160000Z
SUMMARY:Reuni√£o de Teste
DESCRIPTION:Evento de teste criado pelo assistente
ORGANIZER:MAILTO:test@example.com
END:VEVENT
END:VCALENDAR`;

  fs.writeFileSync(testFilePath, testIcsContent);
  console.log(`üìÅ Arquivo de teste criado: ${testFilePath}`);

  // Teste 1: Envio b√°sico de arquivo .ics
  console.log('\n1. Testando envio de arquivo .ics:');
  try {
    const result1 = await sendFile(
      '5511999999999@c.us',
      testFilePath,
      'evento-teste.ics',
      'üìÖ Arquivo de evento de teste',
      false,
      'text/calendar'
    );
    console.log(`   Resultado: ${result1 ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
  }

  // Teste 2: Envio com detec√ß√£o autom√°tica de MIME type
  console.log('\n2. Testando detec√ß√£o autom√°tica de MIME type:');
  try {
    const result2 = await sendFile(
      '5511999999999@c.us',
      testFilePath,
      'evento-auto.ics',
      'üìÖ Arquivo com MIME autom√°tico'
    );
    console.log(`   Resultado: ${result2 ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
  }

  // Teste 3: Arquivo inexistente
  console.log('\n3. Testando arquivo inexistente:');
  try {
    const result3 = await sendFile(
      '5511999999999@c.us',
      '/tmp/arquivo-inexistente.ics',
      'inexistente.ics',
      'Este arquivo n√£o existe'
    );
    console.log(`   Resultado: ${result3 ? '‚úÖ Sucesso' : '‚ùå Falha (esperado)'}`);
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
  }

  // Criar arquivo PDF de teste
  const testPdfPath = '/tmp/test-document.pdf';
  const pdfContent = '%PDF-1.4\n1 0 obj\n<< /Type /Catalog /Pages 2 0 R >>\nendobj\n2 0 obj\n<< /Type /Pages /Kids [3 0 R] /Count 1 >>\nendobj\n3 0 obj\n<< /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] >>\nendobj\nxref\n0 4\n0000000000 65535 f\n0000000009 00000 n\n0000000058 00000 n\n0000000115 00000 n\ntrailer\n<< /Size 4 /Root 1 0 R >>\nstartxref\n175\n%%EOF';
  fs.writeFileSync(testPdfPath, pdfContent);

  // Teste 4: Envio de PDF
  console.log('\n4. Testando envio de arquivo PDF:');
  try {
    const result4 = await sendFile(
      '5511999999999@c.us',
      testPdfPath,
      'documento-teste.pdf',
      'üìÑ Documento PDF de teste'
    );
    console.log(`   Resultado: ${result4 ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
  }

  // Criar arquivo de texto de teste
  const testTxtPath = '/tmp/test-document.txt';
  fs.writeFileSync(testTxtPath, 'Este √© um arquivo de texto de teste.');

  // Teste 5: Envio de arquivo de texto
  console.log('\n5. Testando envio de arquivo de texto:');
  try {
    const result5 = await sendFile(
      '5511999999999@c.us',
      testTxtPath,
      'documento.txt',
      'üìù Arquivo de texto'
    );
    console.log(`   Resultado: ${result5 ? '‚úÖ Sucesso' : '‚ùå Falha'}`);
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
  }

  // Limpeza dos arquivos de teste
  try {
    fs.unlinkSync(testFilePath);
    fs.unlinkSync(testPdfPath);
    fs.unlinkSync(testTxtPath);
    console.log('\nüßπ Arquivos de teste removidos');
  } catch (error) {
    console.log(`\n‚ö†Ô∏è Erro ao remover arquivos de teste: ${error.message}`);
  }

  console.log('\n‚úÖ Testes da fun√ß√£o sendFile conclu√≠dos!');
  console.log('\nüìã Funcionalidades implementadas:');
  console.log('‚Ä¢ ‚úÖ Envio de arquivos de qualquer tipo via WhatsApp');
  console.log('‚Ä¢ ‚úÖ Detec√ß√£o autom√°tica de MIME type baseada na extens√£o');
  console.log('‚Ä¢ ‚úÖ Suporte a legendas personalizadas');
  console.log('‚Ä¢ ‚úÖ Verifica√ß√£o de exist√™ncia do arquivo');
  console.log('‚Ä¢ ‚úÖ Verifica√ß√£o de tamanho (limite 64MB)');
  console.log('‚Ä¢ ‚úÖ Convers√£o autom√°tica para base64');
  console.log('‚Ä¢ ‚úÖ Tratamento de erros robusto');
  console.log('‚Ä¢ ‚úÖ Fun√ß√£o reutiliz√°vel para outros componentes');
}

testSendFile().catch(console.error);
