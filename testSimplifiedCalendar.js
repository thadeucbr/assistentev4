import CalendarAgent from './src/agents/CalendarAgent.js';

// Mock b√°sico do logger
global.logger = {
  info: (component, message, ...args) => console.log(`[INFO] ${component}: ${message}`, ...args),
  debug: (component, message, ...args) => console.log(`[DEBUG] ${component}: ${message}`, ...args),
  error: (component, message, ...args) => console.log(`[ERROR] ${component}: ${message}`, ...args),
  warn: (component, message, ...args) => console.log(`[WARN] ${component}: ${message}`, ...args)
};

// Mock b√°sico da fun√ß√£o sendMessage
global.sendMessage = async (userId, message) => {
  console.log(`üì± Mensagem para ${userId}:`);
  console.log(message);
  console.log('---');
};

async function testSimplifiedCalendar() {
  console.log('üß™ Testando CalendarAgent Simplificado\n');

  // Teste 1: Parsing de data/hora
  console.log('1. Testando parsing de data/hora:');
  const testQueries = [
    'agendar reuni√£o para amanh√£ √†s 14h',
    'marcar consulta hoje √†s 15:30',
    'criar evento sexta-feira √†s 9h',
    'agendar apresenta√ß√£o na pr√≥xima semana √†s 10h30'
  ];

  for (const query of testQueries) {
    try {
      const result = CalendarAgent.parseDateTime(query);
      console.log(`üìÖ "${query}" ‚Üí ${result.success ? result.dateTime.toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) : 'ERRO'}`);
    } catch (error) {
      console.log(`‚ùå Erro ao processar "${query}": ${error.message}`);
    }
  }

  console.log('\n2. Testando an√°lise de inten√ß√£o:');
  const testIntent = 'agendar reuni√£o importante para amanh√£ √†s 15h com dura√ß√£o de 60 minutos';
  
  try {
    const intent = CalendarAgent.analyzeIntent(testIntent);
    console.log('üîç Inten√ß√£o analisada:');
    console.log(JSON.stringify(intent, null, 2));
  } catch (error) {
    console.log(`‚ùå Erro ao analisar inten√ß√£o: ${error.message}`);
  }

  console.log('\n3. Testando m√©todo sendICalFile (mock):');
  try {
    // Teste do m√©todo sendICalFile com arquivo fict√≠cio
    const mockUserId = '5511999999999@c.us';
    const mockFilePath = '/tmp/test.ics';
    const mockFileName = 'evento-test.ics';
    
    // Criar arquivo de teste tempor√°rio
    const fs = await import('fs');
    const testIcsContent = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Assistente Virtual//NONSGML Event//EN
BEGIN:VEVENT
UID:test-event-123
DTSTART:20250106T150000Z
DTEND:20250106T160000Z
SUMMARY:Reuni√£o de Teste
DESCRIPTION:Evento de teste criado pelo assistente
END:VEVENT
END:VCALENDAR`;
    
    fs.writeFileSync(mockFilePath, testIcsContent);
    
    console.log(`üìÅ Arquivo de teste criado: ${mockFilePath}`);
    console.log('üì§ Simulando envio de arquivo .ics via WhatsApp...');
    
    // Limpar arquivo de teste
    fs.unlinkSync(mockFilePath);
    console.log('‚úÖ Teste de arquivo .ics conclu√≠do');
    
  } catch (error) {
    console.log(`‚ùå Erro no teste de arquivo: ${error.message}`);
  }

  console.log('\n‚úÖ Testes do CalendarAgent Simplificado conclu√≠dos!');
  console.log('\nüìã Resumo das melhorias implementadas:');
  console.log('‚Ä¢ ‚úÖ Parsing de data/hora aprimorado com timezone GMT-3');
  console.log('‚Ä¢ ‚úÖ Remo√ß√£o da complexidade de convites por email');
  console.log('‚Ä¢ ‚úÖ Foco no envio de arquivo .ics via WhatsApp');
  console.log('‚Ä¢ ‚úÖ Informa√ß√µes do solicitante na descri√ß√£o do evento');
  console.log('‚Ä¢ ‚úÖ Workflow simplificado conforme solicitado');
}

testSimplifiedCalendar().catch(console.error);
