#!/usr/bin/env node

/**
 * Script para inicializar o sistema de personalidade evolutiva
 * Cria as tabelas necess√°rias no banco de dados
 */

import { initializePersonalityTables } from '../repository/assistantPersonalityRepository.js';
import logger from '../utils/logger.js';

async function initializePersonalitySystem() {
  try {
    logger.info('PersonalitySetup', 'üé≠ Inicializando sistema de personalidade evolutiva...');
    
    // Criar √≠ndices no MongoDB para otimiza√ß√£o
    await initializePersonalityTables();
    
    logger.info('PersonalitySetup', '‚úÖ Sistema de personalidade inicializado com sucesso!');
    logger.info('PersonalitySetup', 'As seguintes funcionalidades foram habilitadas:');
    logger.info('PersonalitySetup', '  ‚Ä¢ Estado emocional evolutivo do assistente');
    logger.info('PersonalitySetup', '  ‚Ä¢ Mem√≥ria de relacionamentos com usu√°rios');
    logger.info('PersonalitySetup', '  ‚Ä¢ Personalidade adaptativa baseada em intera√ß√µes');
    logger.info('PersonalitySetup', '  ‚Ä¢ Prompts din√¢micos evolutivos');
    logger.info('PersonalitySetup', '  ‚Ä¢ Sistema de "sentimentos" pr√≥prios do assistente');
    logger.info('PersonalitySetup', '');
    logger.info('PersonalitySetup', 'üóÉÔ∏è  Cole√ß√µes MongoDB criadas:');
    logger.info('PersonalitySetup', '  ‚Ä¢ assistant_personality (dados principais)');
    logger.info('PersonalitySetup', '  ‚Ä¢ personality_evolution_log (hist√≥rico)');
    logger.info('PersonalitySetup', '');
    logger.info('PersonalitySetup', 'üîÑ O sistema funcionar√° automaticamente a partir de agora!');
    
    process.exit(0);
  } catch (error) {
    logger.error('PersonalitySetup', `‚ùå Erro ao inicializar sistema: ${error.message}`, {
      stack: error.stack
    });
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  initializePersonalitySystem();
}

export default initializePersonalitySystem;
